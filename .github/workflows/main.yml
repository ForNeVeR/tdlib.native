name: Main
on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build:
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      # Build:
      - name: Install
        shell: pwsh
        run: ./macos/install.ps1
      - name: Build
        shell: pwsh
        run: ./macos/build.ps1
      - name: Prepare Artifact
        shell: pwsh
        run: ./macos/prepare-artifact.ps1 # produces artifacts/libtdjson.dylib

      - name: Upload build result
        uses: actions/upload-artifact@v2
        with:
          name: tdlib.osx
          path: artifacts/*

  test:
    needs: build
    runs-on: macos-10.15
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages
      PACKAGE_VERSION_BASE: 1.7.9
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: tdlib.osx
          path: ./artifacts

      - name: Copy artifacts
        shell: pwsh
        run: ./macos/copy-artifacts.ps1
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '2.2.x'
      - name: Pack NuGet
        shell: pwsh
        run: ./common/nuget-pack.ps1 -Version "${{ env.PACKAGE_VERSION_BASE }}.${{ github.run_id }}" -NuGet nuget

      - name: NuGet cache
        uses: actions/cache@v2
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}.nuget.${{ hashFiles('tdsharp/**/*.csproj') }}
      - name: Test
        shell: pwsh
        run: ./common/test.ps1 -NuGet nuget

  release:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: tdlib.osx
          path: ./artifacts/osx
      - name: Archive macOS artifact
        shell: pwsh
        run: Set-Location ./artifacts/osx && zip -r ./tdlib.osx.zip *

      - name: Read version from ref
        id: version
        shell: pwsh
        run: Write-Output "::set-output name=version::$($env:GITHUB_REF -replace '^refs/tags/v', '')"

      - name: Create release
        if: startsWith(github.ref, 'refs/tags/v')
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: v${{ steps.version.outputs.version }}
          draft: true
      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_name: tdlib.osx.zip
          asset_path: ./artifacts/osx/tdlib.osx.zip
          asset_content_type: application/zip
