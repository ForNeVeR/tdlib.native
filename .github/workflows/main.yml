# This file is auto-generated.
name: Main
on:
  push:
    branches:
    - master
    tags:
    - v*
  pull_request:
    branches:
    - master
  schedule:
  - cron: 0 0 * * 6
  workflow_dispatch: 
jobs:
  build-linux-x86-64:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Generate cache key
      shell: pwsh
      run: ./common/Test-UpToDate.ps1 -GenerateCacheKey
    - name: Cache artifacts
      uses: actions/cache@v4
      with:
        key: linux.x86-64.${{ hashFiles('.github/cache-key.json') }}
        path: artifacts
    - name: Install
      shell: pwsh
      run: ./linux/install.ps1 -ForBuild
    - name: Build
      shell: pwsh
      run: ./linux/build.ps1
    - name: Prepare artifact
      shell: pwsh
      run: ./linux/prepare-artifacts.ps1
    - name: 'Prepare artifact: verify produced file'
      shell: pwsh
      run: if (!(Test-Path -LiteralPath 'artifacts/libtdjson.so')) { throw 'File not found' }
    - name: Upload build result
      uses: actions/upload-artifact@v4
      with:
        name: tdlib.linux.x86-64
        path: artifacts/*
  build-macos-aarch64:
    runs-on: macos-14
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Generate cache key
      shell: pwsh
      run: ./common/Test-UpToDate.ps1 -GenerateCacheKey
    - name: Cache artifacts
      uses: actions/cache@v4
      with:
        key: macos.aarch64.${{ hashFiles('.github/cache-key.json') }}
        path: artifacts
    - name: Install
      shell: pwsh
      run: ./macos/install.ps1
    - name: Build
      shell: pwsh
      run: ./macos/build.ps1
    - name: Prepare artifact
      shell: pwsh
      run: ./macos/prepare-artifacts.ps1
    - name: 'Prepare artifact: verify produced file'
      shell: pwsh
      run: if (!(Test-Path -LiteralPath 'artifacts/libtdjson.dylib')) { throw 'File not found' }
    - name: Upload build result
      uses: actions/upload-artifact@v4
      with:
        name: tdlib.macos.aarch64
        path: artifacts/*
  build-macos-x86-64:
    runs-on: macos-11
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Generate cache key
      shell: pwsh
      run: ./common/Test-UpToDate.ps1 -GenerateCacheKey
    - name: Cache artifacts
      uses: actions/cache@v4
      with:
        key: macos.x86-64.${{ hashFiles('.github/cache-key.json') }}
        path: artifacts
    - name: Install
      shell: pwsh
      run: ./macos/install.ps1
    - name: Build
      shell: pwsh
      run: ./macos/build.ps1
    - name: Prepare artifact
      shell: pwsh
      run: ./macos/prepare-artifacts.ps1
    - name: 'Prepare artifact: verify produced file'
      shell: pwsh
      run: if (!(Test-Path -LiteralPath 'artifacts/libtdjson.dylib')) { throw 'File not found' }
    - name: Upload build result
      uses: actions/upload-artifact@v4
      with:
        name: tdlib.macos.x86-64
        path: artifacts/*
  build-windows-x86-64:
    runs-on: windows-2019
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Generate cache key
      shell: pwsh
      run: ./common/Test-UpToDate.ps1 -GenerateCacheKey
    - name: Cache artifacts
      uses: actions/cache@v4
      with:
        key: windows.x86-64.${{ hashFiles('.github/cache-key.json') }}
        path: artifacts
    - name: Build
      shell: pwsh
      run: ./windows/build.ps1 -VcpkgToolchain c:\vcpkg\scripts\buildsystems\vcpkg.cmake
    - name: Prepare artifact
      shell: pwsh
      run: ./windows/prepare-artifacts.ps1
    - name: 'Prepare artifact: verify produced file'
      shell: pwsh
      run: if (!(Test-Path -LiteralPath 'artifacts/tdjson.dll')) { throw 'File not found' }
    - name: Upload build result
      uses: actions/upload-artifact@v4
      with:
        name: tdlib.windows.x86-64
        path: artifacts/*
  test-linux-x86-64:
    needs:
    - build-linux-x86-64
    runs-on: ubuntu-20.04
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages
      PACKAGE_VERSION_BASE: 1.8.21
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Install
      shell: pwsh
      run: ./linux/install.ps1 -ForTests
    - name: 'Download artifact: linux.x86-64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.linux.x86-64
        path: ./build/runtimes/linux-x64/native
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Pack NuGet
      shell: pwsh
      run: dotnet pack tdlib.native.linux-x64.proj -p:Version=${{ env.PACKAGE_VERSION_BASE }}-preview --output build
    - name: NuGet cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}.nuget.${{ hashFiles('tdsharp/**/*.csproj') }}
        path: ${{ env.NUGET_PACKAGES }}
    - name: Test
      shell: pwsh
      run: ./common/test.ps1 -NuGet $env:GITHUB_WORKSPACE/tools/nuget.exe -UseMono
  test-macos-aarch64:
    needs:
    - build-macos-aarch64
    runs-on: macos-14
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages
      PACKAGE_VERSION_BASE: 1.8.21
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: 'Download artifact: macos.aarch64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.macos.aarch64
        path: ./build/runtimes/osx-arm64/native
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Pack NuGet
      shell: pwsh
      run: dotnet pack tdlib.native.osx-arm64.proj -p:Version=${{ env.PACKAGE_VERSION_BASE }}-preview --output build
    - name: NuGet cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}.nuget.${{ hashFiles('tdsharp/**/*.csproj') }}
        path: ${{ env.NUGET_PACKAGES }}
    - name: Test
      shell: pwsh
      run: ./common/test.ps1 -NuGet nuget
  test-macos-x86-64:
    needs:
    - build-macos-x86-64
    runs-on: macos-11
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages
      PACKAGE_VERSION_BASE: 1.8.21
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: 'Download artifact: macos.x86-64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.macos.x86-64
        path: ./build/runtimes/osx-x64/native
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Pack NuGet
      shell: pwsh
      run: dotnet pack tdlib.native.osx-x64.proj -p:Version=${{ env.PACKAGE_VERSION_BASE }}-preview --output build
    - name: NuGet cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}.nuget.${{ hashFiles('tdsharp/**/*.csproj') }}
        path: ${{ env.NUGET_PACKAGES }}
    - name: Test
      shell: pwsh
      run: ./common/test.ps1 -NuGet nuget
  test-windows-x86-64:
    needs:
    - build-windows-x86-64
    runs-on: windows-2019
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages
      PACKAGE_VERSION_BASE: 1.8.21
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: 'Download artifact: windows.x86-64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.windows.x86-64
        path: ./build/runtimes/win-x64/native
    - name: Cache downloads for Windows
      uses: actions/cache@v4
      with:
        key: ${{ hashFiles('windows/install.ps1') }}
        path: build/downloads
    - name: Install dependencies
      shell: pwsh
      run: ./windows/install.ps1
    - name: Windows-specific testing
      shell: pwsh
      run: ./windows/test.ps1
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Pack NuGet
      shell: pwsh
      run: dotnet pack tdlib.native.win-x64.proj -p:Version=${{ env.PACKAGE_VERSION_BASE }}-preview --output build
    - name: NuGet cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}.nuget.${{ hashFiles('tdsharp/**/*.csproj') }}
        path: ${{ env.NUGET_PACKAGES }}
    - name: Test
      shell: pwsh
      run: ./common/test.ps1 -NuGet nuget
  release:
    needs:
    - build-linux-x86-64
    - build-macos-aarch64
    - build-macos-x86-64
    - build-windows-x86-64
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages
      PACKAGE_VERSION_BASE: 1.8.21
    steps:
    - uses: actions/checkout@v4
    - name: 'Download artifact: linux.x86-64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.linux.x86-64
        path: ./build/runtimes/linux-x64/native
    - name: 'Archive artifact for platform: linux'
      shell: pwsh
      run: Set-Location ./build/runtimes/linux-x64/native && zip -r $env:GITHUB_WORKSPACE/tdlib.linux.x86-64.zip *
    - name: 'Download artifact: macos.aarch64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.macos.aarch64
        path: ./build/runtimes/osx-arm64/native
    - name: 'Archive artifact for platform: macos'
      shell: pwsh
      run: Set-Location ./build/runtimes/osx-arm64/native && zip -r $env:GITHUB_WORKSPACE/tdlib.macos.aarch64.zip *
    - name: 'Download artifact: macos.x86-64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.macos.x86-64
        path: ./build/runtimes/osx-x64/native
    - name: 'Archive artifact for platform: macos'
      shell: pwsh
      run: Set-Location ./build/runtimes/osx-x64/native && zip -r $env:GITHUB_WORKSPACE/tdlib.macos.x86-64.zip *
    - name: 'Download artifact: windows.x86-64'
      uses: actions/download-artifact@v4
      with:
        name: tdlib.windows.x86-64
        path: ./build/runtimes/win-x64/native
    - name: 'Archive artifact for platform: windows'
      shell: pwsh
      run: Set-Location ./build/runtimes/win-x64/native && zip -r $env:GITHUB_WORKSPACE/tdlib.windows.x86-64.zip *
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - id: version
      name: Read version from ref
      shell: pwsh
      run: "\"version=$(if ($env:GITHUB_REF.StartsWith('refs/tags/v')) { $env:GITHUB_REF -replace '^refs/tags/v', '' } else { \"$env:PACKAGE_VERSION_BASE-preview\" })\" >> $env:GITHUB_OUTPUT"
    - name: Prepare the release notes
      uses: ForNeVeR/ChangelogAutomation.action@v1
      with:
        format: Markdown
        input: ./CHANGELOG.md
        output: release-notes.md
    - name: 'Pack NuGet package: linux.x86-64'
      shell: pwsh
      run: dotnet pack tdlib.native.linux-x64 -Version ${ steps.version.outputs.version } --output build
    - name: 'Pack NuGet package: macos.aarch64'
      shell: pwsh
      run: dotnet pack tdlib.native.osx-arm64 -Version ${ steps.version.outputs.version } --output build
    - name: 'Pack NuGet package: macos.x86-64'
      shell: pwsh
      run: dotnet pack tdlib.native.osx-x64 -Version ${ steps.version.outputs.version } --output build
    - name: 'Pack NuGet package: windows.x86-64'
      shell: pwsh
      run: dotnet pack tdlib.native.win-x64 -Version ${ steps.version.outputs.version } --output build
    - name: Emit NuGet config
      shell: pwsh
      run: Copy-Item -LiteralPath common/NuGet.config .
    - name: 'Pack NuGet package: main'
      shell: pwsh
      run: dotnet pack -p:Version=${{ steps.version.outputs.version }} --output build
    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: tdlib.nuget
        path: ./build/*.nupkg
    - if: startsWith(github.ref, 'refs/tags/v')
      id: release
      name: Create release
      uses: actions/create-release@v1
      with:
        body_path: ./release-notes.md
        release_name: v${{ steps.version.outputs.version }}
        tag_name: ${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release artifact: linux.x86-64'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.linux.x86-64.zip
        asset_path: ./tdlib.linux.x86-64.zip
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release artifact: macos.aarch64'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.macos.aarch64.zip
        asset_path: ./tdlib.macos.aarch64.zip
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release artifact: macos.x86-64'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.macos.x86-64.zip
        asset_path: ./tdlib.macos.x86-64.zip
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release artifact: windows.x86-64'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.windows.x86-64.zip
        asset_path: ./tdlib.windows.x86-64.zip
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release NuGet package: tdlib.native.linux-x64.${ steps.version.outputs.version }.nupkg'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.native.linux-x64.${ steps.version.outputs.version }.nupkg
        asset_path: ./build/tdlib.native.linux-x64.${ steps.version.outputs.version }.nupkg
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release NuGet package: tdlib.native.osx-arm64.${ steps.version.outputs.version }.nupkg'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.native.osx-arm64.${ steps.version.outputs.version }.nupkg
        asset_path: ./build/tdlib.native.osx-arm64.${ steps.version.outputs.version }.nupkg
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release NuGet package: tdlib.native.osx-x64.${ steps.version.outputs.version }.nupkg'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.native.osx-x64.${ steps.version.outputs.version }.nupkg
        asset_path: ./build/tdlib.native.osx-x64.${ steps.version.outputs.version }.nupkg
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release NuGet package: tdlib.native.win-x64.${ steps.version.outputs.version }.nupkg'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.native.win-x64.${ steps.version.outputs.version }.nupkg
        asset_path: ./build/tdlib.native.win-x64.${ steps.version.outputs.version }.nupkg
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: startsWith(github.ref, 'refs/tags/v')
      name: 'Release NuGet package: tdlib.native.${{ steps.version.outputs.version }}.nupkg'
      uses: actions/upload-release-asset@v1
      with:
        asset_content_type: application/zip
        asset_name: tdlib.native.${{ steps.version.outputs.version }}.nupkg
        asset_path: ./build/tdlib.native.${{ steps.version.outputs.version }}.nupkg
        upload_url: ${{ steps.release.outputs.upload_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      name: Push tdlib.native.linux-x64.${{ steps.version.outputs.version }} to nuget.org
      run: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} ./build/tdlib.native.linux-x64.${{ steps.version.outputs.version }}.nupkg
    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      name: Push tdlib.native.osx-arm64.${{ steps.version.outputs.version }} to nuget.org
      run: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} ./build/tdlib.native.osx-arm64.${{ steps.version.outputs.version }}.nupkg
    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      name: Push tdlib.native.osx-x64.${{ steps.version.outputs.version }} to nuget.org
      run: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} ./build/tdlib.native.osx-x64.${{ steps.version.outputs.version }}.nupkg
    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      name: Push tdlib.native.win-x64.${{ steps.version.outputs.version }} to nuget.org
      run: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} ./build/tdlib.native.win-x64.${{ steps.version.outputs.version }}.nupkg
    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      name: Push tdlib.native.${{ steps.version.outputs.version }} to nuget.org
      run: dotnet nuget push --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} ./build/tdlib.native.${{ steps.version.outputs.version }}.nupkg
  verify-encoding:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Verify encoding
      shell: pwsh
      run: ./common/verify-encoding.ps1
